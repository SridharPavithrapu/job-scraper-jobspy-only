name: Daily Job Scrape & Email (5 PM PT)

on:
  schedule:
    # 5 PM Pacific == 00:00 UTC (PDT) or 01:00 UTC (PST)
    - cron: "0 0 * * *"
    - cron: "0 1 * * *"
  workflow_dispatch: {}   # allow manual run for debugging

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree (debug)
        run: |
          echo "Working dir: $(pwd)"
          ls -la
          test -f requirements.txt && echo "✅ requirements.txt present" || echo "::warning::requirements.txt missing"
          test -f automation_runner.py && echo "✅ automation_runner.py present" || echo "::error::automation_runner.py missing"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -V
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "::warning::requirements.txt not found, installing minimal set"
            pip install "python-jobspy==1.1.82" streamlit pandas "pydantic<3" requests beautifulsoup4 markdownify tls-client PyYAML python-dotenv tzdata numpy==1.26.3
          fi
          python - <<'PY'
import sys
print("pip site-packages:", sys.path[:3])
import jobspy
print("✅ jobspy import OK (python-jobspy)")
PY

      # Determine if this is the real send window (5 PM PT) or not
      - name: Guard — only send at 17:00 America/Los_Angeles
        id: guard
        run: |
          python - <<'PY' >> "$GITHUB_OUTPUT"
from datetime import datetime
from zoneinfo import ZoneInfo
now = datetime.now(ZoneInfo("America/Los_Angeles"))
print(f"local_pt={now.isoformat()}")
print(f"run_ok={'true' if now.hour == 17 else 'false'}")
PY
      - name: Log PT time
        run: |
          echo "Local PT time: ${{ steps.guard.outputs.local_pt }}"
          echo "Send window:   ${{ steps.guard.outputs.run_ok }}"

      # Only needed for REAL runs (scheduled at 5 PM PT)
      - name: Check required secrets (real send only)
        if: steps.guard.outputs.run_ok == 'true'
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
          SMTP_FROM:   ${{ secrets.SMTP_FROM }}
        run: |
          set -e
          missing=0
          for v in SMTP_SERVER SMTP_PORT SMTP_USER SMTP_PASS SMTP_FROM; do
            if [ -z "${!v}" ]; then
              echo "::error::$v is not set (Repo Settings → Secrets and variables → Actions)"; missing=1
            else
              echo "✅ $v present"
            fi
          done
          [ "$missing" -eq 0 ] || exit 1

      # DRY-RUNS for manual debugging (never send email).
      # Do not fail the workflow if a scrape has a transient issue.
      - name: Dry-run yoshitha (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          JOBSPY_PROXIES: ${{ secrets.JOBSPY_PROXIES }}
          JOBSPY_USER_AGENT: ${{ secrets.JOBSPY_USER_AGENT }}
        run: |
          echo "▶️ Dry-run: yoshitha"
          python automation_runner.py --profile yoshitha --dry-run --debug || echo "::warning::dry-run yoshitha encountered errors"

      - name: Dry-run shazia (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          JOBSPY_PROXIES: ${{ secrets.JOBSPY_PROXIES }}
          JOBSPY_USER_AGENT: ${{ secrets.JOBSPY_USER_AGENT }}
        run: |
          echo "▶️ Dry-run: shazia"
          python automation_runner.py --profile shazia --dry-run --debug || echo "::warning::dry-run shazia encountered errors"

      - name: Dry-run ruthvej (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          JOBSPY_PROXIES: ${{ secrets.JOBSPY_PROXIES }}
          JOBSPY_USER_AGENT: ${{ secrets.JOBSPY_USER_AGENT }}
        run: |
          echo "▶️ Dry-run: ruthvej"
          python automation_runner.py --profile ruthvej --dry-run --debug || echo "::warning::dry-run ruthvej encountered errors"

      # REAL SENDS — only at 5 PM PT per guard
      - name: Run automation (send emails at 5 PM PT)
        if: steps.guard.outputs.run_ok == 'true'
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
          SMTP_FROM:   ${{ secrets.SMTP_FROM }}
          JOBSPY_PROXIES: ${{ secrets.JOBSPY_PROXIES }}
          JOBSPY_USER_AGENT: ${{ secrets.JOBSPY_USER_AGENT }}
        run: |
          set -e
          echo "▶️ Sending yoshitha"
          python automation_runner.py --profile yoshitha
          echo "▶️ Sending shazia"
          python automation_runner.py --profile shazia
          echo "▶️ Sending ruthvej"
          python automation_runner.py --profile ruthvej
          echo "✅ All profiles executed"

      - name: Summarize CSV outputs
        if: always()
        run: |
          echo "── automation_out CSVs ──"
          if compgen -G "automation_out/*.csv" > /dev/null; then
            for f in automation_out/*.csv; do
              echo "::group::$f"
              echo "Rows: $(wc -l < "$f")"
              head -n 5 "$f" || true
              echo "::endgroup::"
            done
          else
            echo "::warning::No CSVs in automation_out/"
          fi

          echo "── debug_runs CSVs ──"
          if compgen -G "debug_runs/**/*.csv" > /dev/null; then
            find debug_runs -type f -name "*.csv" -maxdepth 3 -print0 | xargs -0 -I{} sh -c 'echo "::group::{}"; echo "Rows: $(wc -l < "{}")"; head -n 3 "{}" || true; echo "::endgroup::"'
          else
            echo "No debug CSVs found."
          fi

      - name: Upload CSV artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: job-results-${{ github.run_id }}
          path: |
            automation_out/*.csv
            debug_runs/**/*.csv
          if-no-files-found: ignore
